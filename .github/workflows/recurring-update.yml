name: recurring-update

on:
  workflow_dispatch:
  schedule:
    - cron: "*/15 * * * *"

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout only update.sh
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: |
            update.sh
          sparse-checkout-cone-mode: false

      - name: Run update script
        run: ./update.sh

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Authenticate GitHub CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "$GH_TOKEN" | gh auth login --with-token

      - name: Commit new or changed files via GitHub API
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          branch="${GITHUB_REF#refs/heads/}"
          for file in $(find . -type f -not -path "./.git/*" -not -name ".gitkeep"); do
            echo "Checking $file"
      
            # Encode content
            content=$(base64 -w 0 "$file")
            sha_local=$(sha1sum "$file" | awk '{print $1}')
      
            # Try to get file metadata from GitHub
            response=$(gh api -X GET "/repos/${{ github.repository }}/contents/$file?ref=$branch" || true)
      
            # Extract SHA of existing file (if any)
            sha_remote=$(echo "$response" | jq -r '.sha // empty')
            content_remote=$(echo "$response" | jq -r '.content // empty' | tr -d '\n')
      
            # Decode and compare (GitHub returns base64 content)
            if [[ -n "$sha_remote" ]]; then
              # Compare base64 content instead of file hash
              content_local_base64=$(cat "$file" | base64 -w 0)
              if [[ "$content_local_base64" == "$content_remote" ]]; then
                echo "No change in $file, skipping."
                continue
              fi
            fi
      
            echo "Committing $file"
            gh api \
              -X PUT \
              -H "Accept: application/vnd.github+json" \
              "/repos/${{ github.repository }}/contents/$file" \
              -f message="Update $file" \
              -f content="$content" \
              ${sha_remote:+-f sha=$sha_remote} \
              -f branch="$branch"
          done
